/*global module*/
<<<<<<< HEAD
var base64url = require('base64url');
var DataStream = require('./data-stream');
var jwa = require('jwa');
var Stream = require('stream');
var toString = require('./tostring');
var util = require('util');

function jwsSecuredInput(header, payload, encoding) {
  encoding = encoding || 'utf8';
  var encodedHeader = base64url(toString(header), 'binary');
  var encodedPayload = base64url(toString(payload), encoding);
=======
const base64url = require('base64url');
const DataStream = require('./data-stream');
const jwa = require('jwa');
const Stream = require('stream');
const toString = require('./tostring');
const util = require('util');

function jwsSecuredInput(header, payload, encoding) {
  encoding = encoding || 'utf8';
  const encodedHeader = base64url(toString(header), 'binary');
  const encodedPayload = base64url(toString(payload), encoding);
>>>>>>> 28c6f978a4ba08bdae3bd531dac6bebf07cd4f5d
  return util.format('%s.%s', encodedHeader, encodedPayload);
}

function jwsSign(opts) {
<<<<<<< HEAD
  var header = opts.header;
  var payload = opts.payload;
  var secretOrKey = opts.secret || opts.privateKey;
  var encoding = opts.encoding;
  var algo = jwa(header.alg);
  var securedInput = jwsSecuredInput(header, payload, encoding);
  var signature = algo.sign(securedInput, secretOrKey);
=======
  const header = opts.header;
  const payload = opts.payload;
  const secretOrKey = opts.secret || opts.privateKey;
  const encoding = opts.encoding;
  const algo = jwa(header.alg);
  const securedInput = jwsSecuredInput(header, payload, encoding);
  const signature = algo.sign(securedInput, secretOrKey);
>>>>>>> 28c6f978a4ba08bdae3bd531dac6bebf07cd4f5d
  return util.format('%s.%s', securedInput, signature);
}

function SignStream(opts) {
<<<<<<< HEAD
  var secret = opts.secret||opts.privateKey||opts.key;
  var secretStream = new DataStream(secret);
=======
  const secret = opts.secret||opts.privateKey||opts.key;
  const secretStream = new DataStream(secret);
>>>>>>> 28c6f978a4ba08bdae3bd531dac6bebf07cd4f5d
  this.readable = true;
  this.header = opts.header;
  this.encoding = opts.encoding;
  this.secret = this.privateKey = this.key = secretStream;
  this.payload = new DataStream(opts.payload);
  this.secret.once('close', function () {
    if (!this.payload.writable && this.readable)
      this.sign();
  }.bind(this));

  this.payload.once('close', function () {
    if (!this.secret.writable && this.readable)
      this.sign();
  }.bind(this));
}
util.inherits(SignStream, Stream);

SignStream.prototype.sign = function sign() {
  try {
<<<<<<< HEAD
    var signature = jwsSign({
=======
    const signature = jwsSign({
>>>>>>> 28c6f978a4ba08bdae3bd531dac6bebf07cd4f5d
      header: this.header,
      payload: this.payload.buffer,
      secret: this.secret.buffer,
      encoding: this.encoding
    });
    this.emit('done', signature);
    this.emit('data', signature);
    this.emit('end');
    this.readable = false;
    return signature;
  } catch (e) {
    this.readable = false;
    this.emit('error', e);
    this.emit('close');
  }
};

SignStream.sign = jwsSign;

module.exports = SignStream;
