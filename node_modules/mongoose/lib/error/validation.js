<<<<<<< HEAD
=======

>>>>>>> 28c6f978a4ba08bdae3bd531dac6bebf07cd4f5d
/*!
 * Module requirements
 */

var MongooseError = require('../error.js');

/**
 * Document Validation Error
 *
 * @api private
 * @param {Document} instance
 * @inherits MongooseError
 */

function ValidationError(instance) {
  if (instance && instance.constructor.name === 'model') {
<<<<<<< HEAD
    MongooseError.call(this, instance.constructor.modelName + ' validation failed');
  } else {
    MongooseError.call(this, 'Validation failed');
=======
    MongooseError.call(this, instance.constructor.modelName + " validation failed");
  } else {
    MongooseError.call(this, "Validation failed");
>>>>>>> 28c6f978a4ba08bdae3bd531dac6bebf07cd4f5d
  }
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this);
  } else {
    this.stack = new Error().stack;
  }
  this.name = 'ValidationError';
  this.errors = {};
  if (instance) {
    instance.errors = this.errors;
  }
}

/*!
 * Inherits from MongooseError.
 */

ValidationError.prototype = Object.create(MongooseError.prototype);
ValidationError.prototype.constructor = MongooseError;


/**
 * Console.log helper
 */

ValidationError.prototype.toString = function() {
  var ret = this.name + ': ';
  var msgs = [];

  Object.keys(this.errors).forEach(function(key) {
<<<<<<< HEAD
    if (this === this.errors[key]) {
      return;
    }
=======
    if (this == this.errors[key]) return;
>>>>>>> 28c6f978a4ba08bdae3bd531dac6bebf07cd4f5d
    msgs.push(String(this.errors[key]));
  }, this);

  return ret + msgs.join(', ');
};

/*!
 * Module exports
 */

module.exports = exports = ValidationError;
